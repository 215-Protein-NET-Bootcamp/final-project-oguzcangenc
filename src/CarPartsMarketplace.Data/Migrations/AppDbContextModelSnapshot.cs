// <auto-generated />
using System;
using CarPartsMarketplace.Data.Context.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarPartsMarketplace.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarPartsMarketplace.Core.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(1529),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(1535),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(1536),
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(1543),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(1544),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(1544),
                            Name = "customer"
                        });
                });

            modelBuilder.Entity("CarPartsMarketplace.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(4427),
                            Email = "admin@admin.com",
                            EmailConfirmation = true,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(4429),
                            LastName = "Admin",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(4430),
                            PasswordHash = new byte[] { 181, 100, 113, 199, 66, 71, 180, 18, 2, 166, 173, 23, 252, 48, 221, 132, 187, 24, 251, 248, 206, 24, 234, 204, 35, 213, 16, 60, 32, 123, 177, 100, 86, 47, 91, 164, 254, 86, 57, 228, 155, 43, 170, 248, 116, 217, 240, 157, 143, 29, 105, 78, 86, 201, 50, 133, 58, 2, 108, 128, 49, 30, 35, 200 },
                            PasswordSalt = new byte[] { 95, 87, 185, 66, 250, 106, 134, 7, 79, 91, 89, 87, 153, 30, 69, 118, 112, 199, 163, 158, 101, 104, 117, 167, 210, 182, 106, 209, 205, 225, 204, 37, 210, 134, 116, 87, 128, 187, 7, 12, 84, 227, 225, 24, 58, 167, 164, 253, 229, 108, 41, 227, 148, 159, 177, 43, 47, 223, 225, 108, 224, 2, 170, 131, 251, 167, 64, 182, 111, 128, 53, 67, 119, 43, 59, 222, 84, 186, 122, 97, 251, 156, 92, 133, 80, 71, 249, 21, 2, 192, 49, 194, 109, 105, 221, 218, 125, 118, 164, 45, 68, 39, 194, 74, 9, 183, 156, 143, 40, 178, 166, 54, 33, 248, 17, 176, 130, 48, 206, 248, 59, 23, 149, 57, 116, 33, 121, 140 }
                        });
                });

            modelBuilder.Entity("CarPartsMarketplace.Core.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(5993),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(5993),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(5991),
                            OperationClaimId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8837),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8839),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8838),
                            Name = "Dayco"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8842),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8843),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8843),
                            Name = "Ngk"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8844),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8845),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8844),
                            Name = "Bosch"
                        });
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(9898),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(9899),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(9899),
                            Name = "Triger Kayışları"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(9902),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(9904),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(9903),
                            Name = "Ateşleme"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(9906),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(9906),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(9906),
                            Name = "Fren Sistemi"
                        });
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 79, DateTimeKind.Utc).AddTicks(1058),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 79, DateTimeKind.Utc).AddTicks(1060),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 79, DateTimeKind.Utc).AddTicks(1059),
                            Name = "Siyah"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 79, DateTimeKind.Utc).AddTicks(1064),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 79, DateTimeKind.Utc).AddTicks(1064),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 79, DateTimeKind.Utc).AddTicks(1064),
                            Name = "Beyaz"
                        });
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("ColorId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOfferable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("UsageId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("UsageId");

                    b.HasIndex("UserId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8396),
                            Description = "Dayco Triger Seti 1.2 16V Dacıa Logan Sandero Clio Kango Modus Symbol Twıngo",
                            ImageUrl = "placeholder.jpg",
                            IsDeleted = false,
                            IsOfferable = true,
                            IsSold = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8399),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8399),
                            Name = "Dayco Triger Seti 1.2 16V",
                            Price = 1500m,
                            UsageId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 2,
                            ColorId = 2,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8405),
                            Description = "Kutu İçeriği: 4 adet NGK Spark Plugs CNG/LPG BKR-GAS 7987 İnce Paso Kalem Buji",
                            ImageUrl = "placeholder.jpg",
                            IsDeleted = false,
                            IsOfferable = true,
                            IsSold = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8406),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8406),
                            Name = "Ngk Ateşleme Lpg Buji Takımı",
                            Price = 358m,
                            UsageId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            CategoryId = 3,
                            ColorId = 1,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8454),
                            Description = "On Fren Dısk Havalandırmalı Bmw 1 Serısı E81 E82 E87 E88 03-12 3 Serısı E90 E91 318d 318ı 320sı 320d 320ı 325sı 325xı 05-11 Bosch 0986479216",
                            ImageUrl = "placeholder.jpg",
                            IsDeleted = false,
                            IsOfferable = false,
                            IsSold = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8455),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 78, DateTimeKind.Utc).AddTicks(8455),
                            Name = "Bosch On Fren Dısk+Balata Set Ferrari",
                            Price = 657m,
                            UsageId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Usage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Usages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 79, DateTimeKind.Utc).AddTicks(1891),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 79, DateTimeKind.Utc).AddTicks(1893),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 79, DateTimeKind.Utc).AddTicks(1892),
                            Name = "Sıfır"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = 1,
                            CreatedDate = new DateTime(2022, 8, 20, 0, 31, 39, 79, DateTimeKind.Utc).AddTicks(1896),
                            IsDeleted = false,
                            LastActivity = new DateTime(2022, 8, 20, 0, 31, 39, 79, DateTimeKind.Utc).AddTicks(1898),
                            ModifiedDate = new DateTime(2022, 8, 20, 0, 31, 39, 79, DateTimeKind.Utc).AddTicks(1897),
                            Name = "İkinci El"
                        });
                });

            modelBuilder.Entity("CarPartsMarketplace.Core.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("CarPartsMarketplace.Core.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPartsMarketplace.Core.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Offer", b =>
                {
                    b.HasOne("CarPartsMarketplace.Entities.Product", null)
                        .WithMany("Offers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Product", b =>
                {
                    b.HasOne("CarPartsMarketplace.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("CarPartsMarketplace.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPartsMarketplace.Entities.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId");

                    b.HasOne("CarPartsMarketplace.Entities.Usage", "Usage")
                        .WithMany("Products")
                        .HasForeignKey("UsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPartsMarketplace.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Usage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarPartsMarketplace.Core.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("CarPartsMarketplace.Core.Entities.User", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Product", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("CarPartsMarketplace.Entities.Usage", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
